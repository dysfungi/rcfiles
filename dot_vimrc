""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" $Id: $
"" Derek Frank (derekmfrank@gmail.com)
""
"" NAME
""   /etc/vimrc
""
"" DESCRIPTION
""   Vim config file.
""
" all system-wide defaults are set in $vimruntime/archlinux.vim (usually just
" /usr/share/vim/vimfiles/archlinux.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vimrc), since archlinux.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing archlinux.vim since it alters the value of the
" 'compatible' option.
""
" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages.
runtime! archlinux.vim
runtime! vimrc_example.vim
""
" If you prefer the old-style vim functionalty, add 'runtime! vimrc_example.vim'
" Or better yet, read /usr/share/vim/vim72/vimrc_example.vim or the vim manual
" and configure vim to your own liking!
""
""
"" Maintainer:
""       Amir Salihefendic
""       http://amix.dk - amix@amix.dk
""
"" Version:
""       5.0 - 29/05/12 15:43:36
""
"" Blog_post:
""       http://amix.dk/blog/post/19691#The-ultimate-Vim-configuration-on-Github
""
"" Awesome_version:
""       Get this config, nice color schemes and lots of plugins!
""
""       Install the awesome version from:
""
""           https://github.com/amix/vimrc
""
"" Syntax_highlighted:
""       http://amix.dk/vim/vimrc.html
""
"" Raw_version:
""       http://amix.dk/vim/vimrc.txt
""
""
"" SECTIONS
""   -> Plugin Manager
""   -> General
""   -> VIM user interface
""   -> Search
""   -> Colors and Fonts
""   -> Text, tab and indent related
""   -> Visual mode related
""   -> Moving around, tabs and buffers
""   -> Status line
""   -> Editing mappings
""   -> vimgrep searching and cope displaying
""   -> Misc
""   -> Helper functions
""
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file.  This map leader has to be
" set before loading plugins?
let mapleader = ","
let g:mapleader = ","

" Profiling
" Writes to file on quit.
"profile start syntastic.log
"profile! file */syntastic/*


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin Manager (https://github.com/junegunn/vim-plug)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if &compatible
  set nocompatible               " Be iMproved
endif
filetype off                     " required? was in Vundle...

" Required:
call plug#begin(expand('~/.vim/plugged'))

" Add or remove your plugins here:
"Plug 'Shougo/neosnippet.vim'
"Plug 'Shougo/neosnippet-snippets'


""""
"" Generic:
"Plug 'L9'                            " utilities for programming in VIM
"Plug 'Gundo'                         " Graphical undo
Plug 'sheerun/vim-polyglot'
    "let g:polyglot_disabled = ['sensible']
    let g:polyglot_disabled = ['autoindent']

"" Buffers And File System:
"Plug 'fholgado/minibufexpl.vim'      " buffer explorer
Plug 'jlanzarotta/bufexplorer'
"Plug 'FuzzyFinder'                   " vim-scripts/FuzzyFinder; depends on `L9`
"Plug 'wincent/Command-T'             " fast file navigation; requires Ruby; git://git.wincent.com/command-t.git
Plug 'ctrlpvim/ctrlp.vim'
	"let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
	let g:ctrlp_custom_ignore = {
        \ 'dir':  '\v[\/]\.(git|hg|svn|venv|node_modules)$',
        \ 'file': '\v\.(exe|so|dll)$',
        \ 'link': 'some_bad_symbolic_links',
    \ }
    "let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
    let g:ctrlp_show_hidden = 1    " Does not apply when g:ctrlp_user_command is defined.
    if executable('git')
        let g:ctrlp_user_command = {
            \ 'types': {
                \ 1: ['.git', 'cd %s && git ls-files -cdmo --exclude-standard'],
                \ 2: ['.hg', 'hg --cwd %s locate -I .'],
            \ },
            \ 'fallback': 'ag %s -l --hidden --nocolor -g ""',
        \ }
    elseif executable('ag')
        let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
    elseif executable('find')
        let g:ctrlp_user_command = 'find %s -type f'
    endif
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
    map <F2> :NERDTreeToggle<CR>
Plug 'scrooloose/vim-slumlord'  " PlantUML inline previews
Plug 'aklt/plantuml-syntax'  " PlantUML syntax file
Plug 'mracos/mermaid.vim'  " Mermaid syntax file
Plug 'Xuyuanp/nerdtree-git-plugin'

"" Formatters:
Plug 'godlygeek/tabular'

"" Tab Completion:
"Plug 'ervandew/supertab'             " provides tab completion

"" Productivity:
Plug 'tpope/vim-surround'             " Easily manipulate surrounding stuff
Plug 'tpope/vim-fugitive'             " Git in VIM
Plug 'msanders/snipmate.vim'          " Boilerplate code
"Plug 'TaskList.vim'
    " TODO and FIXME marks
    "map <leader>v <Plug>TaskList
    "map T :TaskList<CR>
    "map P :TlistToggle<CR>

"" Language Servers (LSPs)

""" ALE

Plug 'dense-analysis/ale', {'do': 'yarn global add vim-language-server'}
    nmap <silent> <C-[> <Plug>(ale_previous_wrap)
    nmap <silent> <C-]> <Plug>(ale_next_wrap)
    let g:ale_completion_autoimport = 1
    let g:ale_cursor_detail = 0
    let g:ale_echo_cursor = 1
    let g:ale_echo_msg_format = '[%severity%:%linter%] %code: %%s'
    let g:ale_fix_on_save = 1
    let g:ale_loclist_msg_format = '[%linter%] %code: %%s'
    let g:ale_lsp_show_message_format = '%severity%:%linter%: %s'
    let g:ale_open_list = 0
    let g:ale_set_balloons = 0
    let g:ale_set_highlights = 1
    let g:ale_set_loclist = 1
    let g:ale_set_quickfix = 0
    let g:ale_set_signs = 1
    let g:ale_fixers = {
        \ '*': ['remove_trailing_lines', 'trim_whitespace'],
        \ 'go': ['gofmt'],
        \ 'javascript': ['eslint', 'prettier'],
        \ 'python': ['autopep8', 'black', 'isort'],
        \ 'typescript': ['eslint', 'prettier'],
        \ }
    let g:ale_python_isort_auto_poetry = 1
    let g:ale_python_isort_options = '--src=./src'
    let g:ale_linters = {
        \ 'go': ['golint', 'go vet'],
        \ 'python': ['bandit', 'flake8', 'mypy', 'pyright'],
        \ }
    let g:ale_javascript_eslint_options = '--fix --max-warnings=0'
    let g:ale_python_mypy_options = '--follow-imports=silent --ignore-missing-imports --scripts-are-modules'
    " :help g:ale_open_list
    augroup CloseLoclistWindowGroup
      autocmd!
      autocmd QuitPre * if empty(&buftype) | lclose | endif
    augroup END

"" News Feeds:
Plug 'dansomething/vim-hackernews'
"Plug 'erthalion/vim-reddit'  " Requires +python

"" Markup:

" Atlassian Confluence:
Plug 'coddingtonbear/confluencewiki.vim'

" General:
Plug 'greyblake/vim-preview'

" HTML CSS:
"Plug 'mattn/emmet-vim'

" Markdown:
Plug 'mzlogin/vim-markdown-toc'
    let g:vmt_list_item_char = '-'
"Plug 'SidOfc/mkdx'
    if !has('autocmd')
        echo "autocmd is required to enable g:mkdx#settings.toc.update_on_write"
    endif
    let g:mkdx#settings = { 'highlight': { 'enable': 1, 'frontmatter': { 'json': 1, 'yaml': 1 } } }
    let g:mkdx#settings = {
                        \ 'image_extension_pattern': 'a\?png\|jpe\?g\|gif',
                        \ 'gf_on_steroids':          0,
                        \ 'restore_visual':          1,
                        \ 'enter':                   { 'enable': 0,
                        \                              'shift': 0,
                        \                              'o': 1,
                        \                              'shifto': 0,
                        \                              'malformed': 1 },
                        \ 'map':                     { 'prefix': '<leader>',
                        \                              'enable': 1 },
                        \ 'tokens':                  { 'enter':  ['-', '*', '>'],
                        \                              'bold': '**',
                        \                              'italic': '*',
                        \                              'strike': '',
                        \                              'list': '-',
                        \                              'fence': '',
                        \                              'header': '#' },
                        \ 'checkbox':                { 'toggles': [' ', '-', 'x'],
                        \                              'update_tree': 2,
                        \                              'initial_state': ' ' },
                        \ 'toc':                     { 'text': "TOC",
                        \                              'list_token': '-',
                        \                              'position': 0,
                        \                              'update_on_write': 0,
                        \                              'details': {
                        \                                 'enable': 0,
                        \                                 'summary': '{{toc.text}}',
                        \                                 'nesting_level': -1,
                        \                                 'child_count': 5,
                        \                                 'child_summary': 'show {{count}} items',
                        \                              },
                        \                            },
                        \ 'table':                   { 'divider': '|',
                        \                              'header_divider': '-',
                        \                              'align': {
                        \                                 'left':    [],
                        \                                 'right':   [],
                        \                                 'center':  [],
                        \                                 'default': 'center',
                        \                              },
                        \                            },
                        \ 'links':                   { 'external': {
                        \                                 'enable':     0,
                        \                                 'timeout':    3,
                        \                                 'host':       '',
                        \                                 'relative':   1,
                        \                                 'user_agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/9001.0.0000.000 vim-mkdx/1.10.0',
                        \                              },
                        \                              'fragment': {
                        \                                 'jumplist': 1,
                        \                                 'complete': 1,
                        \                              },
                        \                            },
                        \ 'highlight':               {
                        \                              'enable': 0,
                        \                              'frontmatter': {
                        \                                'yaml': 1,
                        \                                'toml': 0,
                        \                                'json': 0,
                        \                              },
                        \                            },
                        \ 'auto_update':             { 'enable': 1 },
                        \ 'fold':                    { 'enable': 0,
                        \                              'components': ['toc', 'fence'] },
                        \ }
Plug 'instant-markdown/vim-instant-markdown', {'for': 'markdown', 'do': 'yarn global add instant-markdown-d'}

" YAML:
Plug 'chase/vim-ansible-yaml'
    let g:ansible_options = {'ignore_blank_lines': 0}

"" Programming Languages:

" F#
Plug 'ionide/Ionide-vim'
    let g:fsharp#fsi_keymap = 'custom' " 'vim-fsharp'
    let g:fsharp#fsi_keymap_send = '<leader>i'
    let g:fsharp#fsi_keymap_toggle = '<leader>f'
    let g:fsharp#show_signature_on_cursor_move = 1
    let g:fsharp#automatic_workspace_init = 1


" Go:
"Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }

" Node/Javascript:
"Plug 'vim-scripts/IndentAnything'
"Plug 'pangloss/vim-javascript'
"Plug 'jpo/vim-railscasts-theme'

" Justfile:
Plug 'NoahTheDuke/vim-just'

" Haskell:
"Plug 'lukerandall/haskellmode-vim'
" augroup HaskellCompile
"     au Bufenter *.hs compiler ghc
"     let g:haddock_browser='open'
"     let g:haddock_browser_callformat='%s %s'
" augroup END

"Plug 'eagletmt/ghcmod-vim'
"Plug 'dag/vim2hs'
    "let g:haskell_conceal_wide=1
"Plug 'ujihisa/neco-ghc'
"Plugin 'kana/vim-textobj-indent'
"Plug 'Twinside/vim-haskellConceal'
"autocmd BufWritePost *.hs GhcModCheckAndLintAsync

" HCL/Terraform:
Plug 'hashivim/vim-terraform'

" Python:
"Plug 'klen/python-mode'
"Plug 'davidhalter/jedi-vim'
"Plug 'alfredodeza/pytest.vim'
    " visual history browser
    "let g:pyflakes_use_quickfix = 0
"Plug 'rkulla/pydiction'
    let g:pydiction_location='~/.vim/bundle/pydiction/complete-dict'
"Plug 'fs111/pydoc.vim'
    " integrates pydoc viewing and searching into Python documentation
"Plug 'kevinw/pyflakes-vim'
    " highlights common Python errors
    "noremap <buffer><silent> z u:PyflakesUpdate<CR>
    "noremap <buffer><silent> Z <C-R>:PyflakesUpdate<CR>
"Plug 'vim-scripts/pep8'
    " PEP8 style conventions
    let g:pep8_map='<F8>'
Plug 'jmcantrell/vim-virtualenv'
    let g:virtualenv_auto_activate = 1

" Shell:
"Plug 'itspriddle/vim-shellcheck'

""""

Plug 'rbtnn/vim-game_engine'
Plug 'rbtnn/vim-mario'

""""""""""""""""""""""""""""""
" Practical VIM by Drew Neil "
""""""""""""""""""""""""""""""
" Chapter 2: Normal Mode
" Tip 12: Combine and Conquer
Plug 'tpope/vim-commentary'         " comment commands: gc{motion}
Plug 'kana/vim-textobj-user'        " https://github.com/kana/vim-textobj-entire/wiki
Plug 'kana/vim-textobj-entire'      " entire file text objects: ie ae
"" END BOOK RECOMMENDATIONS ""
""""""""""""""""""""""""""""""


" Required:
call plug#end()

" Required:
filetype plugin indent on
" To ignore plugin indent changes, instead use:
"filetype plugin on


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set history=1000               " Store lots of :cmdline history
set showcmd                    " Show incomplete cmds down the bottom
set showmode                   " Show current mode down the bottom
set gcr=a:blinkon0             " Disable cursor blink
set autoread                   " Reload files changed outside vim

" Turn on syntax highlighting
syntax on

set modeline
set modelines=3

" Fast saving
nmap <leader>w :w!<cr>

" Runtime path
"set runtimepath=~/.vim/,~/.vim,/etc/vim,/vimfiles,/usr/share/vim/vimfiles,/usr/share/vim/addons,/usr/share/vim/vim74,/usr/share/vim/vim73,/usr/share/vim/addons/after,~/.vim/after

" Colemak config
"source /usr/share/vim/vimfiles/keymap/colemak.vim |


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Completion
" Turn on the WiLd menu
set wildmenu                " Better command line completion. enable ctrl-n and ctrl-p to scroll thru matches
set wildmode=list:longest
set wildignore=*.o,*~,*.pyc,*.pyo  " Ignore compiled files
set wildignore+=*.o,*.obj,*~ "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*/.git/*                     " Git
set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

" Scrolling
set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" Always show current position
set ruler

" Show line numbers
set number                     " Line numbers
set relativenumber             " Relative line numbers

" Height of the command bar
set cmdheight=2

" This makes Vim act like all other editors, buffers can exist in the
" background without being in a window.  A buffer becomes hidden when
" it is abandoned
" http://items.sjbach.com/319/configuring-vim-right
set hidden

" Configure backspace so it acts as it should act
set backspace=indent,eol,start " Allow backspace in insertmode
set whichwrap+=<,>,h,l

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch
set matchpairs=(:),[:],{:},<:>

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
"set visualbell                 " No sounds
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" mouse settings
"set mouse=                    " disable mouse support in all modes
set mouse=vi
set mousehide                 " hide the mouse when typing text


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch

" <Ctrl-l> redraws the screen and removes any search highlighting.
"nnoremap <silent> <C-l> :nohl<CR><C-l>
nmap <leader>h :nohl<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set background=dark
highlight clear
" Enable syntax highlighting
syntax enable
let color="true"
if has("syntax")
  if color == "true"
    " this will switch colors ON
    so ${VIMRUNTIME}/syntax/syntax.vim
    set t_Co=256
  else
    " this switches colors OFF
    syntax off
    set t_Co=0
  endif
endif

" Set extra options when running in GUI mode
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
    colorscheme koehler
    set guifont=Inconsolata-g:h11,\ Inconsolata:h13,\ monofur:h13,\ Profontx:h10,\ Monaco:h10
    set lines=999 columns=999 "columns=100
"else
    " This is a console Vim
    "if exists("+lines")
        "set lines=50
    "endif
    "if exists("+columns")
        "set columns=100
    "endif
endif
nmap <leader>cm :colorscheme morning<cr>:highlight CursorLine ctermbg=224<cr>
nmap <leader>cx :colorscheme xterm16<cr>:highlight CursorLine ctermbg=224<cr>
nmap <leader>cc :colorscheme delek<cr>:highlight CursorLine ctermbg=224<cr>

" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,mac,dos

" Highlight line numbers
highlight LineNr ctermfg=black

" Set syntax colors
highlight Comment ctermfg=darkgrey


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn backup off, since most stuff is in SVN, git etc anyway...
set backupdir=~/.local/vim/backups
set noswapfile
set nobackup
set nowb

set writebackup
set backupext=.bak
"set patchmode=.orig

" Undo
set undolevels=1000            " number of forgivable mistakes
set complete=.,w,b,u,U,t,i,d   " do lots of scanning on tab completion
" Persistent undo
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo')
  silent !mkdir -p ~/.local/vim/backups > /dev/null 2>&1
  set undodir=~/.local/vim/backups
  set undofile
else
  set noundofile
endif

" Relative directory commands
"cnoreabbrev Redit edit %:p:h/
command -complete=file_in_path -nargs=? Redit edit %:p:h/<args>
command -complete=file_in_path -nargs=? Rsplit split %:p:h/<args>
command -complete=file_in_path -nargs=? Rvsplit vsplit %:p:h/<args>
command -complete=file_in_path -nargs=? Rtabedit tabedit %:p:h/<args>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set autoindent             " Maintain line indent when no file-specific indenting is enabled.
"set smartindent
"set copyindent

" 1 tab == 4 spaces
set tabstop=8              " Number of visual spaces per TAB.
set softtabstop=4          " Number of spaces in TAB when editing.
set expandtab              " Convert TABs to spaces.
set smarttab               " Be smart when using tabs

" Display tabs and trailing spaces visually
"set list listchars=tab:\ \ ,trail:·

" Set line length marker
set colorcolumn=72
set linebreak
set textwidth=72
set wrap
"set nowrap

" Prevent # from indenting to column 0
"inoremap # X^H#
inoremap # X<BS>#

" Use <leader>l to toggle display of whitespace
nmap <leader>l :set list!<CR>

" And set some nice chars to do it with
"set listchars=tab:»,eol:¬
set listchars=tab:>-,eol:¬

" Folds
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l
" Smart way to move between tabs
"map <C-0> :tabnext<cr>
"map <C-9> :tabprevious<cr>

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif
" Remember info about open buffers on close
set viminfo^=%

" Automatically change window's cwd to file's dir
" WARNING: The following makes it a pain to use with Syntactic mypy
" https://stackoverflow.com/a/1709267
"if exists('+autochdir')
"    set autochdir
"else
"    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
"endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Always show the status line
set laststatus=2

" Format the status line
"if has('statusline')|set statusline=\ %{HasPaste()}\ \(%l\,%c\)\ File=\"%t\"\ %y%m%r%h\ CWD=\"%{fnamemodify(getcwd(),':t')}\"%<\ PWD=\"%{getcwd()}\"|endif
if has('statusline')|set statusline=\ \(Row:%l/%L,\ Col:%c\)\ \ \ File[%n]:\"%t\"\ %y%m%r%h\ %{HasPaste()}%<%=\ PWD:\ %{fnamemodify(getcwd(),\ ':~')}\ |endif

" Set titlestring
if has('title')|set titlestring=%t%(\ [%R%M]%)|endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Edit mappings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remap VIM 0 to first non-blank character
"map 0 ^

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

" Delete trailing white space on save, useful for Python and CoffeeScript ;)
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
"autocmd BufWrite *.py :call DeleteTrailingWS()
"autocmd BufWrite *.coffee :call DeleteTrailingWS()

" Escape remaps
inoremap jk <Esc>
inoremap ;q <Esc>
inoremap ;p <Esc>
inoremap ,m <Esc>

" Colemak remap (navigation, undo, next search, insert)
noremap z u
noremap u k
noremap h i
noremap i l
noremap l e
noremap e j
noremap k n
noremap n h
noremap K N
noremap N H
noremap I L
noremap H I
noremap U K
noremap E J
noremap L E
noremap Z <C-r>
noremap T U
noremap l U

" Create undo points
inoremap . .<C-g>u
inoremap ! !<C-g>u
inoremap ? ?<C-g>u
inoremap : :<C-g>u
inoremap ; ;<C-g>u
inoremap { {<C-g>u
inoremap } }<C-g>u

" https://stackoverflow.com/questions/51388353/vim-changes-into-replace-mode-on-startup
nnoremap <esc>^[ <esc>^[


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgrep searching and cope displaying
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful!
"
" When you search with vimgrep, display your results in cope by doing:
"   <leader>cc
"
" To go to the next search result do:
"   <leader>n
"
" To go to the previous search results do:
"   <leader>p
"
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>

" No line numbers in mail
au FileType mail setlocal nonu fo=tcrqw spelllang=en spell

" Auto load extensions for different file types
if has('autocmd')
  " jump to last line edited in a given file (based on .viminfo)
  "autocmd BufReadPost *
  "  \ if !&diff && line("'\"") > 0 && line("'\"") <= line("$") |
  "  \   exe "norman g`\"" |
  "  \ endif
  "autocmd BufReadPost *
    "\ if line("'\"") > 0|
    "\   if line("'\"") <= line("$")|
    "\     exe("norm '\"")|
    "\   else|
    "\     exe "norm $"|
    "\   endif
    "\ endif

  " improve legibility
  "au BufRead quickfix setlocal nobuflisted wrap number

  " configure various extensions
  let git_diff_spawn_mode=2
endif

function! WhichEnv() abort
	if has('win64') || has('win32') || has('win16')
        return 'WINDOWS'
    else
       return toupper(substitute(system('uname'), '\n', '', ''))
        " if (WhichEnv() =~# 'LINUX')
        " if (WhichEnv() =~# 'DARWIN')
    endif
endfunction


if executable('gdate')
    command Date read !gdate --iso-8601=seconds
else
    command Date read !date --iso-8601=seconds
endif

" Autoload $MYVIMRC
" https://superuser.com/a/417997
augroup myvimrc
    au!
    au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

command CopyFilePath let @" = expand("%")
command CopyFileAbsPath let @" = expand("%:p")


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FileTypes
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" File type settings
set cinkeys-=0#
set cinkeys-=0{
set indentkeys-=0#
set indentkeys-=0{
set comments=b:#,:%,fb:-,n:),n:> fo=cqrt

" Git
au FileType gitcommit setlocal spell textwidth=72 colorcolumn=72


" C language
au FileType c,h  setlocal ai sw=4 ts=4 noexpandtab cindent omnifunc=ccomplete#Complete
au FileType c,h  color pablo

" Python
au FileType python setlocal colorcolumn=88
au FileType python setlocal tw=88
au FileType python setlocal ai expandtab
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
    "inoremap <C-space> <C-x><C-o>
autocmd BufRead *.py setlocal smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd BufRead *.py setlocal nocindent
"autocmd BufWritePre *.py normal m`:%s/\s\+$//e ``

" Web: js, html, css, php
" https://codissimo.wordpress.com/2011/01/11/enhancing-vim-as-an-htmljscssphp-editor/
"
"   Color scheme and font
au FileType javascript,php setlocal colorcolumn=88
au FileType javascript,php setlocal tw=88
au FileType html,css setlocal colorcolumn=100
au FileType html,css setlocal tw=100
autocmd FileType javascript,html,css,php colorscheme railscasts
autocmd FileType javascript,html,css,php setlocal gfn=Monaco\ 10
"   Highlight current line
autocmd FileType javascript,html,css,php autocmd InsertLeave * setlocal nocursorline
autocmd FileType javascript,html,css,php autocmd InsertLeave * setlocal cursorline
autocmd FileType javascript,html,css,php autocmd InsertLeave * highlight CursorLine ctermbg=black cterm=NONE
"   Indentation
"autocmd FileType html,css setlocal sw=2 ts=2 sts=2
autocmd FileType javascript,html,css,php setlocal smartindent cinwords=if,else,for,while,do,try,catch,finally,with,function,case,var
"   Autocompletion
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
"   Line numbers
autocmd FileType javascript,css,php setlocal number
"   Incremental Search
autocmd FileType javascript,css,php setlocal incsearch

" Confluence Wiki
au FileType confluencewiki setlocal tw=120 colorcolumn=120

" YAML
au FileType ansible,yaml setlocal sw=2 ts=2 sts=2 et


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" =>  Tweaks
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Highlight excess line length
augroup vimrc_autocmds
    autocmd!
    " highlight characters past column 88
    autocmd FileType python highlight Excess ctermbg=DarkGrey guibg=Black
    "autocmd FileType python match Excess /\%88v.*/
    autocmd FileType python set nowrap
augroup END


" Python-mode
" Activate rope
"
" Keys:
"   ~K                Show python docs~
"   N                Show python docs
"   <C-space>        Rope autocomplete
"   <C-c>g           Rope goto definition
"   <C-c>d           Rope show documentation
"   <C-c>f           Rope find occurrences
"   <Leader>b        Set, unset breakpoind (g:pymode_breakpoint enabled)
"   [[               Jump on previous class or function (normal, visual, operator modes)
"   ]]               Jump on next class or function (normal, visual, operator modes)
"   [M               Jump on previous class or method (normal, visual, operator modes)
"   ]M               Jump on next class or method (normal, visual, operator modes)
"
let g:pymode_python = 'python3'
let g:pymode_rope = 0
"
" Documentation
let g:pymode_doc = 0
let g:pymode_doc_key = 'K'
"
" Linting
let g:pymode_lint = 1
let g:pymode_lint_checker = "syntastic,pep8"
" Auto check on save
let g:pymode_lint_write = 1
"
" Support virtualenv
let g:pymode_virtualenv = 1
"
" Enable breakpoints plugin
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'
"
" Syntax highlighting
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all
"
" Don't autofold code
let g:pymode_folding = 0

" Auto complete and ctags
set ofu=syntaxcomplete#Complete
"autocmd FileType python set
set tags+=$HOME/.vim/tags/python.ctags

" Fuzzyfinder
set rtp+=/usr/local/opt/fzf
